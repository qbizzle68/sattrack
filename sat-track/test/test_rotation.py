import unittest
import sys
sys.path.append('../src')
from rotation import *
from order import *
from pyevspace import *

class Test_rotation(unittest.TestCase):
    angs = EulerAngles(90, 90, 90)

    def test_xyz(self):
        mat_xyz = getEulerMatrix(Order.XYZ, self.angs)
        xtovec = rotateMatrixTo(mat_xyz, EVector.e1)
        ytovec = rotateMatrixTo(mat_xyz, EVector.e2)
        ztovec = rotateMatrixTo(mat_xyz, EVector.e3)
        xfromvec = rotateMatrixFrom(mat_xyz, EVector.e1)
        yfromvec = rotateMatrixFrom(mat_xyz, EVector.e2)
        zfromvec = rotateMatrixFrom(mat_xyz, EVector.e3)
        self.assertEqual(xtovec, EVector(0, 0, 1))
        self.assertEqual(ytovec, EVector(0, -1, 0))
        self.assertEqual(ztovec, EVector(1, 0, 0))
        self.assertEqual(xfromvec, EVector(0, 0, 1))
        self.assertEqual(yfromvec, EVector(0, -1, 0))
        self.assertEqual(zfromvec, EVector(1, 0, 0))

    def test_xzy(self):
        mat_xzy = getEulerMatrix(Order.XZY, self.angs)
        xtovec = rotateMatrixTo(mat_xzy, EVector.e1)
        ytovec = rotateMatrixTo(mat_xzy, EVector.e2)
        ztovec = rotateMatrixTo(mat_xzy, EVector.e3)
        xfromvec = rotateMatrixFrom(mat_xzy, EVector.e1)
        yfromvec = rotateMatrixFrom(mat_xzy, EVector.e2)
        zfromvec = rotateMatrixFrom(mat_xzy, EVector.e3)
        self.assertEqual(xtovec, EVector(0, -1, 0))
        self.assertEqual(ytovec, EVector(1, 0, 0))
        self.assertEqual(ztovec, EVector(0, 0, 1))
        self.assertEqual(xfromvec, EVector(0, 1, 0))
        self.assertEqual(yfromvec, EVector(-1, 0, 0))
        self.assertEqual(zfromvec, EVector(0, 0, 1))

    def test_yxz(self):
        mat_yxz = getEulerMatrix(Order.YXZ, self.angs)
        xtovec = rotateMatrixTo(mat_yxz, EVector.e1)
        ytovec = rotateMatrixTo(mat_yxz, EVector.e2)
        ztovec = rotateMatrixTo(mat_yxz, EVector.e3)
        xfromvec = rotateMatrixFrom(mat_yxz, EVector.e1)
        yfromvec = rotateMatrixFrom(mat_yxz, EVector.e2)
        zfromvec = rotateMatrixFrom(mat_yxz, EVector.e3)
        self.assertEqual(xtovec, EVector(1, 0, 0))
        self.assertEqual(ytovec, EVector(0, 0, -1))
        self.assertEqual(ztovec, EVector(0, 1, 0))
        self.assertEqual(xfromvec, EVector(1, 0, 0))
        self.assertEqual(yfromvec, EVector(0, 0, 1))
        self.assertEqual(zfromvec, EVector(0, -1, 0))

    def test_yzx(self):
        mat_yzx = getEulerMatrix(Order.YZX, self.angs)
        xtovec = rotateMatrixTo(mat_yzx, EVector.e1)
        ytovec = rotateMatrixTo(mat_yzx, EVector.e2)
        ztovec = rotateMatrixTo(mat_yzx, EVector.e3)
        xfromvec = rotateMatrixFrom(mat_yzx, EVector.e1)
        yfromvec = rotateMatrixFrom(mat_yzx, EVector.e2)
        zfromvec = rotateMatrixFrom(mat_yzx, EVector.e3)
        self.assertEqual(xtovec, EVector(0, 1, 0))
        self.assertEqual(ytovec, EVector(1, 0, 0))
        self.assertEqual(ztovec, EVector(0, 0, -1))
        self.assertEqual(xfromvec, EVector(0, 1, 0))
        self.assertEqual(yfromvec, EVector(1, 0, 0))
        self.assertEqual(zfromvec, EVector(0, 0, -1))

    def test_zxy(self):
        mat_zxy = getEulerMatrix(Order.ZXY, self.angs)
        xtovec = rotateMatrixTo(mat_zxy, EVector.e1)
        ytovec = rotateMatrixTo(mat_zxy, EVector.e2)
        ztovec = rotateMatrixTo(mat_zxy, EVector.e3)
        xfromvec = rotateMatrixFrom(mat_zxy, EVector.e1)
        yfromvec = rotateMatrixFrom(mat_zxy, EVector.e2)
        zfromvec = rotateMatrixFrom(mat_zxy, EVector.e3)
        self.assertEqual(xtovec, EVector(-1, 0, 0))
        self.assertEqual(ytovec, EVector(0, 0, 1))
        self.assertEqual(ztovec, EVector(0, 1, 0))
        self.assertEqual(xfromvec, EVector(-1, 0, 0))
        self.assertEqual(yfromvec, EVector(0, 0, 1))
        self.assertEqual(zfromvec, EVector(0, 1, 0))

    def test_zyx(self):
        mat_zyx = getEulerMatrix(Order.ZYX, self.angs)
        xtovec = rotateMatrixTo(mat_zyx, EVector.e1)
        ytovec = rotateMatrixTo(mat_zyx, EVector.e2)
        ztovec = rotateMatrixTo(mat_zyx, EVector.e3)
        xfromvec = rotateMatrixFrom(mat_zyx, EVector.e1)
        yfromvec = rotateMatrixFrom(mat_zyx, EVector.e2)
        zfromvec = rotateMatrixFrom(mat_zyx, EVector.e3)
        self.assertEqual(xtovec, EVector(0, 0, 1))
        self.assertEqual(ytovec, EVector(0, 1, 0))
        self.assertEqual(ztovec, EVector(-1, 0, 0))
        self.assertEqual(xfromvec, EVector(0, 0, -1))
        self.assertEqual(yfromvec, EVector(0, 1, 0))
        self.assertEqual(zfromvec, EVector(1, 0, 0))

    def test_xyx(self):
        mat_xyx = getEulerMatrix(Order.XYX, self.angs)
        xtovec = rotateMatrixTo(mat_xyx, EVector.e1)
        ytovec = rotateMatrixTo(mat_xyx, EVector.e2)
        ztovec = rotateMatrixTo(mat_xyx, EVector.e3)
        xfromvec = rotateMatrixFrom(mat_xyx, EVector.e1)
        yfromvec = rotateMatrixFrom(mat_xyx, EVector.e2)
        zfromvec = rotateMatrixFrom(mat_xyx, EVector.e3)
        self.assertEqual(xtovec, EVector(0, 1, 0))
        self.assertEqual(ytovec, EVector(1, 0, 0))
        self.assertEqual(ztovec, EVector(0, 0, -1))
        self.assertEqual(xfromvec, EVector(0, 1, 0))
        self.assertEqual(yfromvec, EVector(1, 0, 0))
        self.assertEqual(zfromvec, EVector(0, 0, -1))

    def test_xzx(self):
        mat_xzx = getEulerMatrix(Order.XZX, self.angs)
        xtovec = rotateMatrixTo(mat_xzx, EVector.e1)
        ytovec = rotateMatrixTo(mat_xzx, EVector.e2)
        ztovec = rotateMatrixTo(mat_xzx, EVector.e3)
        xfromvec = rotateMatrixFrom(mat_xzx, EVector.e1)
        yfromvec = rotateMatrixFrom(mat_xzx, EVector.e2)
        zfromvec = rotateMatrixFrom(mat_xzx, EVector.e3)
        self.assertEqual(xtovec, EVector(0, 0, 1))
        self.assertEqual(ytovec, EVector(0, -1, 0))
        self.assertEqual(ztovec, EVector(1, 0, 0))
        self.assertEqual(xfromvec, EVector(0, 0, 1))
        self.assertEqual(yfromvec, EVector(0, -1, 0))
        self.assertEqual(zfromvec, EVector(1, 0, 0))

    def test_yxy(self):
        mat_yxy = getEulerMatrix(Order.YXY, self.angs)
        xtovec = rotateMatrixTo(mat_yxy, EVector.e1)
        ytovec = rotateMatrixTo(mat_yxy, EVector.e2)
        ztovec = rotateMatrixTo(mat_yxy, EVector.e3)
        xfromvec = rotateMatrixFrom(mat_yxy, EVector.e1)
        yfromvec = rotateMatrixFrom(mat_yxy, EVector.e2)
        zfromvec = rotateMatrixFrom(mat_yxy, EVector.e3)
        self.assertEqual(xtovec, EVector(0, 1, 0))
        self.assertEqual(ytovec, EVector(1, 0, 0))
        self.assertEqual(ztovec, EVector(0, 0, -1))
        self.assertEqual(xfromvec, EVector(0, 1, 0))
        self.assertEqual(yfromvec, EVector(1, 0, 0))
        self.assertEqual(zfromvec, EVector(0, 0, -1))

    def test_yzy(self):
        mat_yzy = getEulerMatrix(Order.YZY, self.angs)
        xtovec = rotateMatrixTo(mat_yzy, EVector.e1)
        ytovec = rotateMatrixTo(mat_yzy, EVector.e2)
        ztovec = rotateMatrixTo(mat_yzy, EVector.e3)
        xfromvec = rotateMatrixFrom(mat_yzy, EVector.e1)
        yfromvec = rotateMatrixFrom(mat_yzy, EVector.e2)
        zfromvec = rotateMatrixFrom(mat_yzy, EVector.e3)
        self.assertEqual(xtovec, EVector(-1, 0, 0))
        self.assertEqual(ytovec, EVector(0, 0, 1))
        self.assertEqual(ztovec, EVector(0, 1, 0))
        self.assertEqual(xfromvec, EVector(-1, 0, 0))
        self.assertEqual(yfromvec, EVector(0, 0, 1))
        self.assertEqual(zfromvec, EVector(0, 1, 0))

    def test_zxz(self):
        mat_zxz = getEulerMatrix(Order.ZXZ, self.angs)
        xtovec = rotateMatrixTo(mat_zxz, EVector.e1)
        ytovec = rotateMatrixTo(mat_zxz, EVector.e2)
        ztovec = rotateMatrixTo(mat_zxz, EVector.e3)
        xfromvec = rotateMatrixFrom(mat_zxz, EVector.e1)
        yfromvec = rotateMatrixFrom(mat_zxz, EVector.e2)
        zfromvec = rotateMatrixFrom(mat_zxz, EVector.e3)
        self.assertEqual(xtovec, EVector(0, 0, 1))
        self.assertEqual(ytovec, EVector(0, -1, 0))
        self.assertEqual(ztovec, EVector(1, 0, 0))
        self.assertEqual(xfromvec, EVector(0, 0, 1))
        self.assertEqual(yfromvec, EVector(0, -1, 0))
        self.assertEqual(zfromvec, EVector(1, 0, 0))

    def test_zyz(self):
        mat_zyz = getEulerMatrix(Order.ZYZ, self.angs)
        xtovec = rotateMatrixTo(mat_zyz, EVector.e1)
        ytovec = rotateMatrixTo(mat_zyz, EVector.e2)
        ztovec = rotateMatrixTo(mat_zyz, EVector.e3)
        xfromvec = rotateMatrixFrom(mat_zyz, EVector.e1)
        yfromvec = rotateMatrixFrom(mat_zyz, EVector.e2)
        zfromvec = rotateMatrixFrom(mat_zyz, EVector.e3)
        self.assertEqual(xtovec, EVector(-1, 0, 0))
        self.assertEqual(ytovec, EVector(0, 0, 1))
        self.assertEqual(ztovec, EVector(0, 1, 0))
        self.assertEqual(xfromvec, EVector(-1, 0, 0))
        self.assertEqual(yfromvec, EVector(0, 0, 1))
        self.assertEqual(zfromvec, EVector(0, 1, 0))

    def test_rotation(self):
        rot = Rotation(Order.ZYZ, self.angs)
        xtovec = rot.RotateTo(EVector.e1)
        ytovec = rot.RotateTo(EVector.e2)
        ztovec = rot.RotateTo(EVector.e3)
        xfromvec = rot.RotateFrom(EVector.e1)
        yfromvec = rot.RotateFrom(EVector.e2)
        zfromvec = rot.RotateFrom(EVector.e3)
        self.assertEqual(xtovec, EVector(-1, 0, 0))
        self.assertEqual(ytovec, EVector(0, 0, 1))
        self.assertEqual(ztovec, EVector(0, 1, 0))
        self.assertEqual(xfromvec, EVector(-1, 0, 0))
        self.assertEqual(yfromvec, EVector(0, 0, 1))
        self.assertEqual(zfromvec, EVector(0, 1, 0))

    def test_frames(self):
        rot = Rotation(Order.ZYZ, self.angs)
        rot2 = Rotation(Order.XZY, self.angs)
        xtovec = rot.RotateToFrame(rot2, EVector.e1)
        ytovec = rot.RotateToFrame(rot2, EVector.e2)
        ztovec = rot.RotateToFrame(rot2, EVector.e3)
        xfromvec = rot.RotateFromFrame(rot2, EVector.e1)
        yfromvec = rot.RotateFromFrame(rot2, EVector.e2)
        zfromvec = rot.RotateFromFrame(rot2, EVector.e3)
        self.assertEqual(xtovec, EVector(0, 1, 0))
        self.assertEqual(ytovec, EVector(0, 0, 1))
        self.assertEqual(ztovec, EVector(1, 0, 0))
        self.assertEqual(xfromvec, EVector(0, 0, 1))
        self.assertEqual(yfromvec, EVector(1, 0, 0))
        self.assertEqual(zfromvec, EVector(0, 1, 0))

    def test_fromto(self):
        xtovec = rotateFromTo(Order.ZYZ, self.angs, Order.XZY, self.angs, EVector.e1)
        ytovec = rotateFromTo(Order.ZYZ, self.angs, Order.XZY, self.angs, EVector.e2)
        ztovec = rotateFromTo(Order.ZYZ, self.angs, Order.XZY, self.angs, EVector.e3)
        self.assertEqual(xtovec, EVector(0, 1, 0))
        self.assertEqual(ytovec, EVector(0, 0, 1))
        self.assertEqual(ztovec, EVector(1, 0, 0))

if __name__ == '__main__':
    unittest.main()
